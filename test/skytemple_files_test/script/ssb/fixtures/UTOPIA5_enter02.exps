macro WaitUnlockLives($lock, $actor)
{
    WaitLockLives($lock, $actor);
    Unlock($lock);
}

macro WaitUnlockObject($lock, $object)
{
    WaitLockObject($lock, $object);
    Unlock($lock);
}

macro WaitUnlockPerformer($lock, $performer)
{
    WaitLockObject($lock, $performer);
    Unlock($lock);
}

macro WaitUnlockMain()
{
    WaitLockSupervision(20);
    Unlock(20);
}

macro shake($duration)
{
    for($LOCAL0 = 0; $LOCAL0 < $duration; $LOCAL0+=1;)
    {
        Slide2PositionOffset(1, -1, 0);
        Wait(2);
        Slide2PositionOffset(1, 1, 0);
        Wait(2);
    }
}

macro spotlight($x, $y, $size, $speed)
{
    supervision_SpecialActing(27, 0, 0);
    supervision_SpecialActing(28, $x, $y);
    supervision_SpecialActing(29, $size, 0);
    supervision_SpecialActing(30, $speed, 0);
}

macro camera_shake($time, $arg0, $arg1, $arg3)
{
    camera_SetEffect($arg0, $arg1, $arg3);
    Wait($time);
    camera_SetEffect(0, 0, 0);
}

macro amber_hop_once()
{
    SetAnimation(5);
    Wait(23);
    SetAnimation(2);
}

macro amber_hop_se($duration)
{
    for($LOCAL0 = 0; $LOCAL0 < $duration; $LOCAL0+=1;)
    {
        se_PlayVolume(257, 128);
        Wait(23);
    }
}

macro nod()
{
    SetAnimation(31);
    WaitAnimation();
    SetAnimation(2);
}

macro dungeon_talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2, $s3, $s4)
{
    switch($DUNGEON_ENTER)
    {
        case 2:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2);
            break;
        case 3:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s3);
            break;
        case 4:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s4);
    }
}

macro dungeon_talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2, $s3, $s4)
{
    switch($DUNGEON_ENTER)
    {
        case 2:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2);
            break;
        case 3:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s3);
            break;
        case 4:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s4);
    }
}

macro echo_se($se_id)
{
    Wait(60);
    se_PlayVolume($se_id, 192);
    WaitSe($se_id);
    Wait(60);
    se_PlayVolume($se_id, 128);
    WaitSe($se_id);
    Wait(90);
}


// More general-purpose ones


macro talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    message_KeyWait();
}

macro monologue($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    message_KeyWait();
}

macro talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    CallCommon(CORO_MESSAGE_CLOSE_WAIT_FUNC);
}

macro monologue_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    CallCommon(CORO_MESSAGE_CLOSE_WAIT_FUNC);
}

macro talk_interrupted($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    message_CloseEnforce();
}

macro monologue_interrupted($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    message_CloseEnforce();
}


macro with_sweat_medium_wait($actor)
{
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_medium($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    }
}

macro tr_sweat_medium_wait()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    WaitEffect();
}

macro tr_sweat_medium()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
}

macro with_sweat_small_wait($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_small($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    }
}

macro tr_sweat_small_wait()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    WaitEffect();
}

macro tr_sweat_small()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
}

macro with_sweat_single_wait($actor)
{
    se_Play(8961);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROP, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_single($actor)
{
    se_Play(8961);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROP, 3);
    }
}

macro tr_sweat_single_wait()
{
    se_Play(8961);
    SetEffect(EFFECT_SWEAT_DROP, 3);
    WaitEffect();
}

macro tr_sweat_single()
{
    se_Play(8961);
    SetEffect(EFFECT_SWEAT_DROP, 3);
}

macro with_shock_wait($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_shock($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
}

macro tr_shock_wait()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED, 3);
    WaitEffect();
}

macro tr_shock()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED, 3);
}

macro with_shock_m_wait($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_shock_m($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
}

macro tr_shock_m_wait()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    WaitEffect();
}

macro tr_shock_m()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
}

macro with_vshock_wait($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_vshock($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
}

macro tr_vshock_wait()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED, 3);
    WaitEffect();
}

macro tr_vshock()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED, 3);
}

macro with_vshock_m_wait($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_vshock_m($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
}

macro tr_vshock_m_wait()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    WaitEffect();
}

macro tr_vshock_m()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
}

macro with_question($actor)
{
    se_Play(8962);
    with(actor $actor)
    {
        SetEffect(EFFECT_QUESTION_MARK, 3);
    }
}

macro with_question_wait($actor)
{
    se_Play(8962);
    with(actor $actor)
    {
        SetEffect(EFFECT_QUESTION_MARK, 3);
    }
    with(actor $actor)
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro tr_question()
{
    se_Play(8962);
    SetEffect(EFFECT_QUESTION_MARK, 3);
}

macro tr_question_wait()
{
    se_Play(8962);
    SetEffect(EFFECT_QUESTION_MARK, 3);
    WaitEffect();
}
    



macro sub_talk($face, $string)
{
    ~talk(1, $face, FACE_POS_STANDARD, 0, 0, $string);
}

macro sub_talk_close($face, $string)
{
    ~talk_close(1, $face, FACE_POS_STANDARD, 0, 0, $string);
}

macro main_talk($face, $string)
{
    ~talk(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_talk_close($face, $string)
{
    ~talk_close(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_monologue($face, $string)
{
    ~monologue(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_monologue_close($face, $string)
{
    ~monologue_close(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro amber_talk($face, $string)
{
    ~talk(0, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro amber_talk_close($face, $string)
{
    ~talk_close(0, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro sub_turn()
{
    with(actor 1)
    {
        Turn2DirectionLives(0, 10, 2);
    }
    with(actor 1)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor 1)
    {
        SetAnimation(2);
    }
    WaitExecuteLives(1);
}

macro amber_turn()
{
    with(actor 0)
    {
        Turn2DirectionLives(0, 10, 2);
    }
    with(actor 0)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor 0)
    {
        SetAnimation(2);
    }
    WaitExecuteLives(0);
}

macro Turn2DirectionSub($actor, $duration)
{
    with(actor $actor)
    {
        Turn2DirectionLives($duration, 10, 1);
    }
    with(actor $actor)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor $actor)
    {
        SetAnimation(2);
    }
    WaitExecuteLives($actor);
}

macro Turn2DirectionAmber($actor, $duration)
{
    with(actor $actor)
    {
        Turn2DirectionLives($duration, 10, 0);
    }
    with(actor $actor)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor $actor)
    {
        SetAnimation(2);
    }
    WaitExecuteLives($actor);
}

macro sub_scn4($face, $string1, $string2, $string3)
{
    if not($DUNGEON_CONQUEST_LIST[2])
    {
        ~sub_talk_close($face, $string1);
    }
    elseif not($DUNGEON_CONQUEST_LIST[3])
    {
        ~sub_talk_close($face, $string2);
    }
    else
    {
        ~sub_talk_close($face, $string3);
    }
}

macro korok($item_id, $string)
{   
    if not($SCENARIO_TALK_BIT_FLAG[34])
    {
        $SCENARIO_TALK_BIT_FLAG[34] = 1;
        ~sub_talk_close(FACE_JOYOUS, "Yahaha! You found me!");
        me_Play(4);
        message_Mail($string);
        WaitMe(4);
        message_Close();
        item_Set(0, $item_id, 0);
        message_Menu(MENU_GIVE_ITEM);
    }
    else
    {
        ~sub_talk_close(FACE_HAPPY, "Buh-bye!");
    }
}



def 0
{
    CallCommon(CORO_DEBUG_FLAG_SETTING_PUPURIN);
    switch(scn($SCENARIO_MAIN)[1])
    {
        case 2:
            if not($SCENARIO_TALK_BIT_FLAG[26])
            {
                $SCENARIO_TALK_BIT_FLAG[26] = 1;
                ~sub_talk_close(FACE_HAPPY, "Howdy there, [hero]![K]\nCain't seem to sleep no more?");
                message_SetWaitMode(0, 0); 
                message_SetFaceEmpty(2, FACE_WORRIED, FACE_POS_BOTTOM_R_FACEINW);
                message_Monologue("(Is \"cain't\" even a word...?)[W:10]");
                message_KeyWait();
                message_SetWaitMode(-1, -1);
                ~main_talk_close(FACE_NORMAL, "Er--[W:10]yeah, I guess...[K]\nMostly trying to finish up old business.[C]Have any idea what any of the last\nthree Pokémon could possibly be?[K][FACE:1]\nNo description is too small!");
                ~sub_talk(FACE_WORRIED, "Hmm...lessee here...");
                ~sub_talk(FACE_NORMAL, "Figure I can't recall much, but...[K]\nThere was one time where I saw some\nyella'-lookin critter scampering 'round...");
                ~sub_talk_close(FACE_NORMAL, "Yella' not just in color, mind you.[K]\nThing saw me and curled up into\na ball, poor little thing.");
                ~main_talk_close(FACE_NORMAL, "That helps![K][FACE:1] Thank you so much!");
                with(actor 1)
                {
                    ExecuteCommon(CORO_JUMP_HAPPY_FUNC_SERIES, 0);
                }
                ~sub_talk_close(FACE_HAPPY, "Any time!");
                ~amber_talk_close(FACE_HAPPY, "...");
            }
            else
            {
                ~sub_talk(FACE_HAPPY, "What, forget already?[K]\nRemember, yella' hide![K] Curls into a ball!");
                ~sub_talk_close(FACE_NORMAL, "Sure you don't need any extra rest?");
                with(actor 2)
                {
                    ExecuteCommon(CORO_HEAD_SHAKE_FUNC_SERIES, 0);
                }
                ~main_talk_close(FACE_SAD, "Oh, never.[K][FACE:2] But here I am!");
                
            }
            break;
        case 3:
            if not($SCENARIO_TALK_BIT_FLAG[26])
            {
                $SCENARIO_TALK_BIT_FLAG[26] = 1;
                ~sub_talk(FACE_NORMAL, "Back on the grind, eh?");
                if($DUNGEON_CONQUEST_LIST[2])
                {
                    ~sub_talk(FACE_HAPPY, "Well, I saw you rounded up the Pokémon\nI was talkin' about earlier![K] Nice work!");
                    ~sub_talk_close(FACE_HAPPY, "Bad news is, uh...[K][FACE:0]\nHaven't got nothin' left to help.[K] Sorry.");
                    ~main_talk_close(FACE_NORMAL, "That's alright.[K][FACE:1]\nYou've already helped me a bunch!");
                    ~amber_turn();
                    se_Play(8975);
                    with(actor 0)
                    {
                        ExecuteCommon(CORO_JUMP_ANGRY_FUNC_SERIES, 0);
                    }
                    WaitExecuteLives(0);
                    ~amber_talk_close(FACE_HAPPY, "And [BS]I[BR][W:10] helped a ton too!");
                    Wait(50);
                    ~Turn2DirectionAmber(2, 8);
                    Wait(60);
                    ~main_talk_close(FACE_NORMAL, "Yes.[K] You did.");
                    ~with_sweat_single_wait(0);
                    ~amber_talk_close(FACE_HAPPY, "J-[W:5]just wanted to make it clear, is all...");
                }
                else
                {
                    ~sub_talk(FACE_NORMAL, "Been thinkin' a bit more of the little beast\nI saw earlier.[K] I think I also \'member\nit hidin' underground when it turned tail.");
                    ~sub_talk(FACE_HAPPY, "Definitely somethin' that was born\nfor diggin' deep in the dirt.[K]\nOr maybe sand, I dunno.");
                    ~sub_talk_close(FACE_NORMAL, "Now how's that sound?");
                    ~main_talk_close(FACE_NORMAL, "I think I have a good idea by now...[K][FACE:1]thanks!");
                }
            }
            else
            {
                if($DUNGEON_CONQUEST_LIST[2])
                {
                    ~Turn2DirectionAmber(1, 0);
                    ~sub_talk_close(FACE_HAPPY, "[partner], you sure are a different\nkind of [CS:K]Doll[CR], are'ntcha...?");
                    ~amber_turn();
                    ~amber_talk_close(FACE_WORRIED, "Hm?[K] In a good or bad way?");
                    ~sub_talk_close(FACE_NORMAL, "Great, obviously...![K]\nBut thinkin' otherwise proves my point!");
                }
                else
                {
                    ~sub_talk(FACE_NORMAL, "It likes to burrow itself in the ground!");
                    ~sub_talk_close(FACE_HAPPY, "Stay alert now, y'hear?[K]\nAnd get some rest after all this.");
                    ~main_talk_close(FACE_SAD, "...[K][VS:1:3]After, yeah.[VR]");
                }
            }
            break;
        case 4:
            if not($SCENARIO_TALK_BIT_FLAG[26])
            {
                $SCENARIO_TALK_BIT_FLAG[26] = 1;
                ~sub_talk(FACE_HAPPY, "Lookie here![K] Just one more critter!");
                if not($DUNGEON_CONQUEST_LIST[2])
                {   
                    ~sub_talk(FACE_HAPPY, "And from the looks of things, you've saved\nthe last one to be the one I've seen\na while ago!");
                    ~sub_talk_close(FACE_NORMAL, "I just, uh...[K]don't really have more\nthings to go off of...");
                    ~main_talk_close(FACE_WORRIED, "...[K]How tall was it?");
                    ~sub_talk_close(FACE_NORMAL, "Hmm...'bout 0.6m.[K]\nOr 2'00\", if you're weird.");
                    ~main_talk_close(FACE_WORRIED, "That's enough then.[K] Thanks.");
                }
                elseif not($DUNGEON_CONQUEST_LIST[3])
                {
                    ~sub_talk(FACE_HAPPY, "Haven't got a clue on who the last one\nis, though...[K][FACE:0] But I reckon it must\nbe in a [BS]Hustle[BR] to last this long.");
                    ~sub_talk_close(FACE_NORMAL, "Real [BS]Serene Grace[BR] under pressure.[K]\nOr maybe just [BS]Super Luck[BR]y, dunno.");
                    ~main_talk_close(FACE_WORRIED, "...[K]I think that might help.");
                    ~sub_talk(FACE_HAPPY, "Really now?[K]\nWasn't even trying that time, oh well...");
                }
                else
                {
                    ~sub_talk(FACE_HAPPY, "Haven't got a clue on who the last one\nis, though...[K][FACE:0] But I reckon it must be\nunder a lotta [BS]Pressure[BR] right now.");
                    ~sub_talk(FACE_NORMAL, "Wonder if it's some sorta [BS]Infiltrator[BR]\nand it spied on us, so that's how it\nknows how to avoid us...");
                    ~main_talk_close(FACE_WORRIED, "...[K]I think that might help.");
                    ~sub_talk(FACE_HAPPY, "Really now?[K]\nWasn't even trying that time, oh well...");
                }
                ~sub_talk_close(FACE_NORMAL, "Home stretch![K] Finish strong, y'hear?");
            }
            else
            {
                ~sub_talk_close(FACE_NORMAL, "You sure you're holdin' up there?");
                ~main_talk_close(FACE_SAD, "Sure.");
                ~Turn2DirectionAmber(1, 4);
                ~sub_talk_close(FACE_NORMAL, "And [partner]?");
                ~amber_turn();
                ~amber_talk(FACE_WORRIED, "[hero]'s...[K]well...");
                with(actor 0)
                {
                    ExecuteCommon(CORO_HEAD_SHAKE_FUNC_SERIES, 0);
                }
                ~amber_talk_close(FACE_WORRIED, "Well, NOT well.[K][FACE:0] But she'll be fine.");
                ~sub_talk_close(FACE_NORMAL, "I was askin' about YOU.");
                ~amber_talk_close(FACE_WORRIED, "Hm?[K] Why wouldn't I be okay?");
                ~sub_talk_close(FACE_HAPPY, "Never said you weren't.[K] Was just askin'\nif you know what you're doing.");
                
            }
            
            break;
        case 5:
            if not($SCENARIO_TALK_BIT_FLAG[26])
            {
                $SCENARIO_TALK_BIT_FLAG[26] = 1;
                ~sub_talk_close(FACE_HAPPY, "Knew ya had it in ya![K]\nCongrats on wranglin' everybody in!");
                ~main_talk_close(FACE_SAD, "Thanks.");
                ~sub_talk_close(FACE_NORMAL, "Now![K][FACE:1] I reckon a big ol' nap is in order.");
                ~main_talk_close(FACE_SAD, "Later.[K] Got something else to do.");
            }
            else
            {
                ~main_talk_close(FACE_SAD, "Hey.[K] Thanks for everything.");
                ~sub_talk(FACE_HAPPY, "Eh? What's this here?[K]\nPlannin' on headin' out somewhere?");
                
                ~sub_talk_close(FACE_JOYOUS, "Unless you're fixin' yourself to sleep\nforever for all the hard work you've\nput into this world, hahaha...!");
                Wait(50);
                with(actor 2)
                {
                    ExecuteCommon(CORO_HEAD_SHAKE_FUNC_SERIES, 0);
                }
                WaitExecuteLives(2);
                ~main_talk_close(FACE_PAIN, "N-[W:5]nah.[K][FACE:5] Not on my mind.");
                with(actor 1)
                {
                    SetEffect(EFFECT_NONE, 3);
                }
                
            }
            break;
    }
    supervision_Suspend(-2);
    end;
}

def 1 for_actor(2)
{
    SetAnimation(2);
    hold;
}

def 2 for_actor(0)
{
    SetAnimation(2);
    hold;
}

def 3 for_actor(1)
{
    SetAnimation(2);
    Turn2DirectionLives(0, 10, 2);
    hold;
}

