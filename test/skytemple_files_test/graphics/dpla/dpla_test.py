#  Copyright 2020-2025 SkyTemple Contributors
#
#  This file is part of SkyTemple.
#
#  SkyTemple is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  SkyTemple is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with SkyTemple.  If not, see <https://www.gnu.org/licenses/>.
import typing

from skytemple_files.common.types.file_types import FileType
from skytemple_files.graphics.dpla.handler import DplaHandler
from skytemple_files.graphics.dpla.protocol import DplaProtocol
from skytemple_files_test.case import SkyTempleFilesTestCase, fixpath, romtest


class DplaTestCase(SkyTempleFilesTestCase[DplaHandler, DplaProtocol]):
    handler = DplaHandler

    def setUp(self) -> None:
        self.one: DplaProtocol = self._load_main_fixture(self._fix_path1())
        self.assertIsNotNone(self.one)

    def test_get_colors(self):
        # fmt: off
        self.assertEqual(
            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 7, 167, 0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 3, 163, 0, 3, 163], [0, 40, 169, 0, 40, 169, 0, 47, 175, 7, 47, 175, 7, 47, 175, 7, 47, 175, 7, 47, 175, 7, 47, 175, 7, 47, 175, 7, 47, 175, 0, 47, 175, 0, 40, 169], [0, 76, 175, 0, 76, 175, 0, 79, 175, 7, 86, 183, 7, 86, 183, 15, 94, 191, 15, 94, 191, 15, 94, 191, 14, 87, 183, 7, 86, 183, 0, 79, 175, 0, 76, 175], [0, 113, 181, 0, 113, 181, 0, 118, 183, 6, 119, 191, 15, 126, 191, 23, 134, 199, 23, 134, 199, 23, 134, 199, 15, 126, 191, 6, 119, 191, 0, 118, 183, 0, 113, 181], [0, 150, 187, 0, 150, 187, 6, 159, 191, 14, 167, 199, 14, 167, 199, 23, 175, 207, 23, 175, 207, 23, 175, 207, 14, 167, 199, 14, 167, 199, 6, 159, 191, 0, 151, 191], [24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95, 24, 24, 95], [79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0, 79, 47, 0], [111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15, 111, 62, 15], [135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15, 135, 95, 15], [126, 146, 206, 132, 165, 214, 137, 183, 223, 132, 165, 214, 126, 146, 206, 132, 165, 214, 137, 183, 223, 132, 165, 214, 126, 146, 206, 132, 165, 214, 137, 183, 223, 132, 165, 214], [132, 165, 214, 137, 183, 223, 132, 165, 214, 137, 183, 223, 132, 165, 214, 137, 183, 223, 132, 165, 214, 137, 183, 223, 132, 165, 214, 137, 183, 223, 132, 165, 214, 137, 183, 223], [137, 183, 223, 132, 165, 214, 126, 146, 206, 132, 165, 214, 137, 183, 223, 132, 165, 214, 126, 146, 206, 132, 165, 214, 137, 183, 223, 132, 165, 214, 126, 146, 206, 132, 165, 214], [39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0], [70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0], [111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119, 87, 111, 119], [127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151, 127, 143, 151], [159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175, 159, 175, 175], [199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207, 199, 207, 207], [215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223, 215, 223, 223], [239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239], [47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 47, 95, 175, 23, 63, 135, 47, 52, 175, 62, 47, 175, 83, 47, 175, 104, 47, 175, 125, 47, 175, 146, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 167, 47, 175, 175, 47, 148, 175, 47, 116, 175, 47, 84, 175, 47, 52, 175, 73, 47, 175, 105, 47, 175, 138, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 175, 170, 47, 137, 175, 47, 94, 175, 47, 64, 135, 23, 47, 175, 86, 47, 175, 129, 47, 175, 172, 47, 135, 175], [79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 127, 215, 79, 103, 215, 79, 81, 215, 99, 79, 215, 122, 79, 215, 145, 79, 215, 169, 79, 215, 192, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 215, 215, 79, 183, 215, 79, 150, 215, 79, 115, 215, 79, 81, 215, 110, 79, 215, 144, 79, 215, 178, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 215, 212, 79, 173, 215, 79, 128, 215, 79, 82, 215, 79, 79, 215, 119, 79, 215, 165, 79, 215, 209, 79, 175, 215], [127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 175, 239, 127, 155, 239, 127, 137, 239, 136, 127, 239, 155, 127, 239, 173, 127, 239, 193, 127, 239, 211, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 231, 127, 239, 239, 127, 222, 239, 127, 194, 239, 127, 165, 239, 127, 138, 239, 144, 127, 239, 172, 127, 239, 200, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 239, 228, 127, 212, 239, 127, 175, 239, 127, 138, 239, 127, 127, 239, 151, 127, 239, 189, 127, 239, 226, 127, 215, 239], [183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 223, 255, 183, 211, 255, 183, 199, 255, 183, 187, 255, 190, 183, 255, 203, 183, 255, 215, 183, 255, 227, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 255, 183, 253, 255, 183, 235, 255, 183, 217, 255, 183, 198, 255, 185, 183, 255, 203, 183, 255, 221, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 255, 239, 183, 247, 255, 183, 223, 255, 183, 199, 255, 183, 183, 255, 191, 183, 255, 215, 183, 255, 239, 183, 247, 255], [199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 238, 255, 199, 228, 255, 199, 220, 255, 199, 210, 255, 199, 202, 255, 205, 199, 255, 214, 199, 255, 223, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 232, 199, 255, 248, 199, 255, 255, 199, 246, 255, 199, 232, 255, 199, 219, 255, 199, 205, 255, 207, 199, 255, 221, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 235, 199, 255, 254, 199, 237, 255, 199, 218, 255, 199, 199, 255, 199, 199, 255, 218, 199, 255, 237, 199, 254, 255], [23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 63, 135, 23, 44, 135, 23, 25, 135, 40, 23, 135, 58, 23, 135, 78, 23, 135, 97, 23, 135, 115, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 135, 135, 23, 110, 135, 23, 82, 135, 23, 53, 135, 23, 26, 135, 47, 23, 135, 75, 23, 135, 104, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 135, 132, 23, 101, 135, 23, 64, 135, 23, 26, 135, 23, 23, 135, 56, 23, 135, 93, 23, 135, 130, 23, 103, 135], [39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0, 39, 183, 0], [70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0, 70, 207, 0], [111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0, 111, 231, 0]],
            self.one.colors,
        )
        # fmt: one

    def test_set_colors(self):
        new_colors = [[1, 2, 3] * 16]
        new_colors = new_colors * 4
        self.one.colors = new_colors
        self.assertEqual(self.one.colors, new_colors)
        saved = self._save_and_reload_main_fixture(self.one)
        self.assertEqual(saved.colors, new_colors)

    def test_read_with_invalid_toc_pointers(self):
        two: DplaProtocol = self._load_main_fixture(self._fix_path2())
        self.assertIsNotNone(two)

    def test_get_durations_per_frame_for_colors(self):
        # fmt: off
        self.assertEqual([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 6, 6, 6, 18, 18, 18, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], self.one.durations_per_frame_for_colors)
        # fmt: on

    def test_set_durations_per_frame_for_colors(self):
        new_durations = list(range(32))
        self.one.durations_per_frame_for_colors = new_durations
        self.assertEqual(self.one.durations_per_frame_for_colors, new_durations)
        saved = self._save_and_reload_main_fixture(self.one)
        self.assertEqual(saved.durations_per_frame_for_colors, new_durations)

    def test_get_palette_for_frame(self):
        # fmt: off
        self.assertEqual(
            [0, 0, 0, 0, 3, 163, 0, 40, 169, 0, 76, 175, 0, 113, 181, 0, 150, 187, 24, 24, 95, 79, 47, 0, 111, 62, 15, 135, 95, 15, 126, 146, 206, 132, 165, 214, 137, 183, 223, 39, 183, 0, 70, 207, 0, 111, 231, 0],
            self.one.get_palette_for_frame(0, 0)
        )
        self.assertEqual(
            [0, 0, 0, 87, 111, 119, 127, 143, 151, 159, 175, 175, 199, 207, 207, 215, 223, 223, 239, 239, 239, 47, 95, 175, 79, 127, 215, 127, 175, 239, 183, 223, 255, 199, 238, 255, 23, 63, 135, 39, 183, 0, 70, 207, 0, 111, 231, 0],
            self.one.get_palette_for_frame(1, 0)
        )
        self.assertEqual(
            [0, 0, 0, 0, 3, 163, 0, 47, 175, 0, 79, 175, 0, 118, 183, 6, 159, 191, 24, 24, 95, 79, 47, 0, 111, 62, 15, 135, 95, 15, 137, 183, 223, 132, 165, 214, 126, 146, 206, 39, 183, 0, 70, 207, 0, 111, 231, 0],
            self.one.get_palette_for_frame(0, 10)
        )
        self.assertEqual(
            [0, 0, 0, 87, 111, 119, 127, 143, 151, 159, 175, 175, 199, 207, 207, 215, 223, 223, 239, 239, 239, 146, 47, 175, 192, 79, 215, 211, 127, 239, 227, 183, 255, 223, 199, 255, 115, 23, 135, 39, 183, 0, 70, 207, 0, 111, 231, 0],
            self.one.get_palette_for_frame(1, 32)
        )
        # fmt: on

    def test_has_for_palette(self):
        self.assertTrue(self.one.has_for_palette(0))
        self.assertTrue(self.one.has_for_palette(1))
        self.assertFalse(self.one.has_for_palette(2))
        self.one.colors = []
        saved = self._save_and_reload_main_fixture(self.one)
        self.assertFalse(saved.has_for_palette(0))
        self.assertFalse(saved.has_for_palette(1))
        self.one.colors = [[1, 2, 3] * 32] * 16
        saved = self._save_and_reload_main_fixture(self.one)
        self.assertTrue(saved.has_for_palette(0))
        self.assertFalse(saved.has_for_palette(1))

    def test_get_frame_count_for_palette(self):
        self.assertEqual(12, self.one.get_frame_count_for_palette(0))
        self.assertEqual(99, self.one.get_frame_count_for_palette(1))
        self.assertRaises(ValueError, self.one.get_frame_count_for_palette, 2)

    def test_enable_for_palette(self):
        self.one.colors = []
        self.assertFalse(self.one.has_for_palette(0))
        self.assertFalse(self.one.has_for_palette(1))
        self.one.enable_for_palette(0)
        self.assertTrue(self.one.has_for_palette(0))
        self.assertFalse(self.one.has_for_palette(1))
        self.one.enable_for_palette(1)
        self.assertTrue(self.one.has_for_palette(0))
        self.assertTrue(self.one.has_for_palette(1))

    def test_disable_for_palette(self):
        self.assertTrue(self.one.has_for_palette(0))
        self.assertTrue(self.one.has_for_palette(1))
        self.one.disable_for_palette(0)
        self.assertFalse(self.one.has_for_palette(0))
        self.assertTrue(self.one.has_for_palette(1))
        self.one.disable_for_palette(1)
        self.assertFalse(self.one.has_for_palette(1))
        self.assertFalse(self.one.has_for_palette(1))

    def test_get_duration_for_palette(self):
        self.assertEqual(18, self.one.get_duration_for_palette(0))
        self.assertEqual(3, self.one.get_duration_for_palette(1))

    def test_set_duration_for_palette(self):
        self.one.set_duration_for_palette(0, 99)
        self.one.set_duration_for_palette(1, 11)
        # fmt: off
        self.assertEqual(
            [99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11],
            self.one.durations_per_frame_for_colors
        )
        # fmt: on

    def test_apply_palette_animations(self):
        pal = [
            [0] * 16 * 3,
            [0, 0, 0] + [1] * 15 * 3,
            [0, 0, 0] + [2] * 15 * 3,
            [0, 0, 0] + [3] * 15 * 3,
        ] * 4
        # fmt: off
        self.assertEqual(
            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 3, 163, 0, 40, 169, 0, 76, 175, 0, 113, 181, 0, 150, 187, 24, 24, 95, 79, 47, 0, 111, 62, 15, 135, 95, 15, 126, 146, 206, 132, 165, 214, 137, 183, 223, 39, 183, 0, 70, 207, 0, 111, 231, 0], [0, 0, 0, 87, 111, 119, 127, 143, 151, 159, 175, 175, 199, 207, 207, 215, 223, 223, 239, 239, 239, 47, 95, 175, 79, 127, 215, 127, 175, 239, 183, 223, 255, 199, 238, 255, 23, 63, 135, 39, 183, 0, 70, 207, 0, 111, 231, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
            self.one.apply_palette_animations(pal, 0)
        )
        self.assertEqual(
            [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 3, 163, 0, 40, 169, 0, 76, 175, 0, 113, 181, 0, 150, 187, 24, 24, 95, 79, 47, 0, 111, 62, 15, 135, 95, 15, 132, 165, 214, 137, 183, 223, 132, 165, 214, 39, 183, 0, 70, 207, 0, 111, 231, 0], [0, 0, 0, 87, 111, 119, 127, 143, 151, 159, 175, 175, 199, 207, 207, 215, 223, 223, 239, 239, 239, 167, 47, 175, 215, 79, 215, 231, 127, 239, 239, 183, 255, 232, 199, 255, 135, 23, 135, 39, 183, 0, 70, 207, 0, 111, 231, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
            self.one.apply_palette_animations(pal, 1033)
        )

    @romtest(file_names=["dungeon.bin"], path="DUNGEON/")
    def test_using_rom(self, _, file, pmd2_data):
        dbin_model = FileType.DUNGEON_BIN.deserialize(file, pmd2_data)
        for fn in dbin_model.get_files_with_ext("dpla"):
            if fn == "dungeon81.dpla":
                # TODO: There's something weird going on with this one. Investigate?
                continue
            try:
                model = self.handler.deserialize(dbin_model.get_raw(fn))
                model_reloaded = self._save_and_reload_main_fixture(model)
                self.assertEqual(model.colors, model_reloaded.colors)
                model_reloaded.colors = []
                model_reloaded2 = self._save_and_reload_main_fixture(model_reloaded)
                self.assertNotEqual(model.colors, model_reloaded2.colors)
                self.assertEqual(model_reloaded.colors, model_reloaded2.colors)
            except Exception as e:
                raise AssertionError(f"failed processing file {fn}") from e

    @typing.no_type_check
    @classmethod
    @fixpath
    def _fix_path1(cls):
        return "fixtures", "one.dpla"

    @typing.no_type_check
    @classmethod
    @fixpath
    def _fix_path2(cls):
        return "fixtures", "two.dpla"
