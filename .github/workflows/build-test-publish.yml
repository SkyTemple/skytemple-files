# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build, test and publish

on: [push, pull_request]

jobs:
  cache:
    runs-on: ubuntu-latest
    name: Build Python package cache
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        override: true
        profile: minimal
    - uses: actions/cache@v3
      with:
        # We do this per Run, since the requirements.txt contains references to Git repos that might have changed.
        path: ${{ env.pythonLocation }}
        key: py${{ matrix.python-version }}-${{ github.run_id }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  linting:
    runs-on: ubuntu-latest
    needs: cache
    name: Pylint
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - uses: actions/cache@v3
      with:
        path: ${{ env.pythonLocation }}
        key: py3.11-${{ github.run_id }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Analysing the code with pylint
      run: pylint skytemple_files --load-plugins=pylint_deprecated_checker --rcfile=pylintrc
      env:
        PYTHONPATH: .

  code-formatting:
    runs-on: ubuntu-latest
    needs: cache
    name: Code Format Check
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: py3.11-${{ github.run_id }}
      - uses: psf/black@stable
        with:
          options: "--check -t py39 --extend-exclude _resources/pmdsky-debug"
          src: "skytemple_files"

  import-check:
    runs-on: ubuntu-latest
    needs: cache
    name: Check unused imports
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - uses: actions/cache@v3
      with:
        path: ${{ env.pythonLocation }}
        key: py3.11-${{ github.run_id }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    - name: Analysing the code with pycln
      run: pycln skytemple_files -c -a

  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - uses: theCapypara/mypy-check@rust-support
      name: Run type checks
      with:
        path: 'skytemple_files'
        mypy_flags: '--config-file mypy.ini --junit-xml mypy.xml'
        requirements: '-r requirements.txt'
        python_version: '${{ matrix.python-version }}'
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: MyPy Test Results (Python ${{ matrix.python-version }})
        path: mypy.xml

  test:
    runs-on: ubuntu-latest
    needs: cache
    name: Runs tests
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
        native: [true, false]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v3
      with:
        path: ${{ env.pythonLocation }}
        key: py${{ matrix.python-version }}-${{ github.run_id }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        pip install tox tox-gh-actions
    - name: Enable native modules
      if: matrix.native
      run: |
        echo "SKYTEMPLE_USE_NATIVE=1" >> $GITHUB_ENV
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        override: true
    - name: Test with tox
      run: tox -- -m "not romtest"
      working-directory: test
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: "Pytest Test Results (Python ${{ matrix.python-version }} - Native ${{ matrix.native }})"
        path: test/pytest.xml

#  test_with_rom:
#    # This uses a self-hosted runner with access to the ROM at /rom.nds.
#    runs-on: ["self-hosted", "romtests"]
#    name: Runs tests with real ROM
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
#        native: [true, false]
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        submodules: 'recursive'
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v5
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install tox tox-gh-actions
#    - name: Enable native modules
#      if: matrix.native
#      run: |
#        echo "SKYTEMPLE_USE_NATIVE=1" >> $GITHUB_ENV
#    - uses: actions-rs/toolchain@v1
#      with:
#        toolchain: stable
#        default: true
#        override: true
#    - name: Test with tox
#      run: tox -- -m "romtest"
#      working-directory: test
#      env:
#        SKYTEMPLE_TEST_ROM: /rom.nds
#    - name: Upload Test Results
#      if: always()
#      uses: actions/upload-artifact@v3
#      with:
#        name: "Pytest ROM Test Results (Python ${{ matrix.python-version }}) - Native ${{ matrix.native }})"
#        path: test/pytest.xml

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs:
      - test
#      - test_with_rom
      - typechecks
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: artifacts/**/*.xml

  build:
    needs:
      - test
#      - test_with_rom
      - typechecks
    runs-on: ubuntu-latest
    name: Build the Python wheel
    steps:
      # For tags we assume the version in pyproject.toml is correct!
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/version\s*=\s*\"(.*?)(\.rc.*|\.a.*|\.post.*)?\"/version=\"\1.dev0+${GITHUB_SHA::8}\"/" pyproject.toml
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(tomlq '.project.version' pyproject.toml -r)" >> $GITHUB_ENV
      - name: Build Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.5.0-manylinux2014_x86_64
        with:
          python-versions: 'cp39-cp39 cp310-cp310 cp311-cp311 cp312-cp312'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Upgrade pip and install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload *.whl
