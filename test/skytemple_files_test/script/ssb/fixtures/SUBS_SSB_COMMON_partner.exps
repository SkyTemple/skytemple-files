macro WaitUnlockLives($lock, $actor)
{
    WaitLockLives($lock, $actor);
    Unlock($lock);
}

macro WaitUnlockObject($lock, $object)
{
    WaitLockObject($lock, $object);
    Unlock($lock);
}

macro WaitUnlockPerformer($lock, $performer)
{
    WaitLockObject($lock, $performer);
    Unlock($lock);
}

macro WaitUnlockMain()
{
    WaitLockSupervision(20);
    Unlock(20);
}

macro shake($duration)
{
    for($LOCAL0 = 0; $LOCAL0 < $duration; $LOCAL0+=1;)
    {
        Slide2PositionOffset(1, -1, 0);
        Wait(2);
        Slide2PositionOffset(1, 1, 0);
        Wait(2);
    }
}

macro spotlight($x, $y, $size, $speed)
{
    supervision_SpecialActing(27, 0, 0);
    supervision_SpecialActing(28, $x, $y);
    supervision_SpecialActing(29, $size, 0);
    supervision_SpecialActing(30, $speed, 0);
}

macro camera_shake($time, $arg0, $arg1, $arg3)
{
    camera_SetEffect($arg0, $arg1, $arg3);
    Wait($time);
    camera_SetEffect(0, 0, 0);
}

macro amber_hop_once()
{
    SetAnimation(5);
    Wait(23);
    SetAnimation(2);
}

macro amber_hop_se($duration)
{
    for($LOCAL0 = 0; $LOCAL0 < $duration; $LOCAL0+=1;)
    {
        se_PlayVolume(257, 128);
        Wait(23);
    }
}

macro nod()
{
    SetAnimation(31);
    WaitAnimation();
    SetAnimation(2);
}

macro dungeon_talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2, $s3, $s4)
{
    switch($DUNGEON_ENTER)
    {
        case 2:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2);
            break;
        case 3:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s3);
            break;
        case 4:
            ~talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $s4);
    }
}

macro dungeon_talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2, $s3, $s4)
{
    switch($DUNGEON_ENTER)
    {
        case 2:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s2);
            break;
        case 3:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s3);
            break;
        case 4:
            ~talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $s4);
    }
}

macro echo_se($se_id)
{
    Wait(60);
    se_PlayVolume($se_id, 192);
    WaitSe($se_id);
    Wait(60);
    se_PlayVolume($se_id, 128);
    WaitSe($se_id);
    Wait(90);
}


// More general-purpose ones


macro talk($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    message_KeyWait();
}

macro monologue($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    message_KeyWait();
}

macro talk_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    CallCommon(CORO_MESSAGE_CLOSE_WAIT_FUNC);
}

macro monologue_close($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    CallCommon(CORO_MESSAGE_CLOSE_WAIT_FUNC);
}

macro talk_interrupted($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Talk($string);
    message_CloseEnforce();
}

macro monologue_interrupted($actor, $face_type, $face_pos, $offset_x, $offset_y, $string)
{
    message_SetFaceEmpty($actor, $face_type, $face_pos);
    message_FacePositionOffset($offset_x, $offset_y);
    message_Monologue($string);
    message_CloseEnforce();
}


macro with_sweat_medium_wait($actor)
{
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_medium($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    }
}

macro tr_sweat_medium_wait()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
    WaitEffect();
}

macro tr_sweat_medium()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_MEDIUM, 3);
}

macro with_sweat_small_wait($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_small($actor)
{
    se_Play(8972);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    }
}

macro tr_sweat_small_wait()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
    WaitEffect();
}

macro tr_sweat_small()
{
    se_Play(8972);
    SetEffect(EFFECT_SWEAT_DROPS_FROM_BOTH_SIDES_SMALL, 3);
}

macro with_sweat_single_wait($actor)
{
    se_Play(8961);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROP, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_sweat_single($actor)
{
    se_Play(8961);
    with(actor $actor)
    {
        SetEffect(EFFECT_SWEAT_DROP, 3);
    }
}

macro tr_sweat_single_wait()
{
    se_Play(8961);
    SetEffect(EFFECT_SWEAT_DROP, 3);
    WaitEffect();
}

macro tr_sweat_single()
{
    se_Play(8961);
    SetEffect(EFFECT_SWEAT_DROP, 3);
}

macro with_shock_wait($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_shock($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
}

macro tr_shock_wait()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED, 3);
    WaitEffect();
}

macro tr_shock()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED, 3);
}

macro with_shock_m_wait($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_shock_m($actor)
{
    se_Play(8968);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
}

macro tr_shock_m_wait()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    WaitEffect();
}

macro tr_shock_m()
{
    se_Play(8968);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
}

macro with_vshock_wait($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_vshock($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED, 3);
    }
}

macro tr_vshock_wait()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED, 3);
    WaitEffect();
}

macro tr_vshock()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED, 3);
}

macro with_vshock_m_wait($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
    with (actor $actor) 
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro with_vshock_m($actor)
{
    se_Play(8969);
    with(actor $actor)
    {
        SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    }
}

macro tr_vshock_m_wait()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
    WaitEffect();
}

macro tr_vshock_m()
{
    se_Play(8969);
    SetEffect(EFFECT_SHOCKED_MIRRORED, 3);
}

macro with_question($actor)
{
    se_Play(8962);
    with(actor $actor)
    {
        SetEffect(EFFECT_QUESTION_MARK, 3);
    }
}

macro with_question_wait($actor)
{
    se_Play(8962);
    with(actor $actor)
    {
        SetEffect(EFFECT_QUESTION_MARK, 3);
    }
    with(actor $actor)
    {
        WaitEffect();
    }
    WaitExecuteLives($actor);
}

macro tr_question()
{
    se_Play(8962);
    SetEffect(EFFECT_QUESTION_MARK, 3);
}

macro tr_question_wait()
{
    se_Play(8962);
    SetEffect(EFFECT_QUESTION_MARK, 3);
    WaitEffect();
}
    



macro sub_talk($face, $string)
{
    ~talk(1, $face, FACE_POS_STANDARD, 0, 0, $string);
}

macro sub_talk_close($face, $string)
{
    ~talk_close(1, $face, FACE_POS_STANDARD, 0, 0, $string);
}

macro main_talk($face, $string)
{
    ~talk(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_talk_close($face, $string)
{
    ~talk_close(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_monologue($face, $string)
{
    ~monologue(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro main_monologue_close($face, $string)
{
    ~monologue_close(2, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro amber_talk($face, $string)
{
    ~talk(0, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro amber_talk_close($face, $string)
{
    ~talk_close(0, $face, FACE_POS_BOTTOM_R_FACEINW, 0, 0, $string);
}

macro sub_turn()
{
    with(actor 1)
    {
        Turn2DirectionLives(0, 10, 2);
    }
    with(actor 1)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor 1)
    {
        SetAnimation(2);
    }
    WaitExecuteLives(1);
}

macro amber_turn()
{
    with(actor 0)
    {
        Turn2DirectionLives(0, 10, 2);
    }
    with(actor 0)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor 0)
    {
        SetAnimation(2);
    }
    WaitExecuteLives(0);
}

macro Turn2DirectionSub($actor, $duration)
{
    with(actor $actor)
    {
        Turn2DirectionLives($duration, 10, 1);
    }
    with(actor $actor)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor $actor)
    {
        SetAnimation(2);
    }
    WaitExecuteLives($actor);
}

macro Turn2DirectionAmber($actor, $duration)
{
    with(actor $actor)
    {
        Turn2DirectionLives($duration, 10, 0);
    }
    with(actor $actor)
    {
        SetEffect(EFFECT_NONE, 3);
    }
    with(actor $actor)
    {
        SetAnimation(2);
    }
    WaitExecuteLives($actor);
}

macro sub_scn4($face, $string1, $string2, $string3)
{
    if not($DUNGEON_CONQUEST_LIST[2])
    {
        ~sub_talk_close($face, $string1);
    }
    elseif not($DUNGEON_CONQUEST_LIST[3])
    {
        ~sub_talk_close($face, $string2);
    }
    else
    {
        ~sub_talk_close($face, $string3);
    }
}

macro korok($item_id, $string)
{   
    if not($SCENARIO_TALK_BIT_FLAG[34])
    {
        $SCENARIO_TALK_BIT_FLAG[34] = 1;
        ~sub_talk_close(FACE_JOYOUS, "Yahaha! You found me!");
        me_Play(4);
        message_Mail($string);
        WaitMe(4);
        message_Close();
        item_Set(0, $item_id, 0);
        message_Menu(MENU_GIVE_ITEM);
    }
    else
    {
        ~sub_talk_close(FACE_HAPPY, "Buh-bye!");
    }
}



macro partner_talk($face, $string)
{
    ~talk(0, $face, FACE_POS_STANDARD, 0, 0, $string);
}

macro partner_talk_close($face, $string)
{
    ~talk_close(0, $face, FACE_POS_STANDARD, 0, 0, $string);
}


def 0 {
    debug_Print("Partner Dialogue");
    switch($GROUND_ENTER)
    {
        case 9:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_HAPPY, "I'll never understand how you sleep\nin the complete dark.[K] Isn't it distracting?");
                    ~main_talk_close(FACE_SAD, "The opposite, actually...");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "Do you sometimes chat with the\nvoid, [hero]?");
                    ~main_talk_close(FACE_STUNNED, "[VS:1:3]No...?[VR]");
                    ~partner_talk(FACE_NORMAL, "Shame.[K] The void is a good listener.[K]\nIt wouldn't judge you for anything.");
                    ~partner_talk_close(FACE_HAPPY, "But you wanna know the difference\nbetween the void and I?[K] [BS]I[BR] can\nactually reply!");
                    ~main_talk_close(FACE_NORMAL, "Glad you said \"difference\" and not\n\"improvement\".");
                    end;
                case 4:
                    ~partner_talk_close(FACE_WORRIED, "You sure you don't want to nap for a bit?[C]There's really no rush in going for\nthe last Pokémon...[K]you can save\nyour strength for later...");
                    ~main_talk_close(FACE_NORMAL, "My strength doesn't need saving.[K][FACE:1]\nThis Pokémon does!");
                    ~partner_talk_close(FACE_WORRIED, "...");
                    end;
                case 5:
                    ~partner_talk(FACE_WORRIED, "Y'know, I can finally start to see the\nappeal of this place now...");
                    ~partner_talk_close(FACE_SAD, "Sorry you felt the need to even\nsleep here in the first place...");
                    ~main_talk_close(FACE_SAD, "It's fine.[K] I doubt I'll be coming here\noften anymore anyway.");
                    end;
            }
            end;
        case 6:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_JOYOUS, "Congratulations!");
                    ~main_talk_close(FACE_WORRIED, "For what?");
                    ~partner_talk_close(FACE_JOYOUS, "Walking around![K]\nNow go get your daily dose of socialization!");
                    ~main_talk_close(FACE_SIGH, "I think we ought to lower the dosage\nto yearly...[K]I keep getting migraines\nas an unintended side effect...");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "Those two [CS:K]Dolls[CR] sure love to argue, huh?");
                    ~main_talk_close(FACE_SAD, "No kidding.[K]\nThat actually makes them happy...?");
                    ~partner_talk_close(FACE_NORMAL, "I guess it's a quick and easy excuse\nto talk to others.[K][FACE:1] We should do it more!");
                    end;
                case 4:
                    ~partner_talk_close(FACE_WORRIED, "Glad you've decided to wander around\ntown for a bit more, but...[C]Take your time, okay?");
                    ~main_talk_close(FACE_SAD, "I'll take very little time, yeah.");
                    end;
                case 5:
                    ~partner_talk_close(FACE_WORRIED, "I never noticed it, but...[K][VS:1:2]\nThe shadow in between the\ntents really gives me the creeps...[VR]");
                    ~main_talk_close(FACE_SAD, "I dunno...[K]I find it calming.");
                    end;
            }
            end;
        case 34:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_HAPPY, "Isn't this great?[K] All the tents here will\nbe used for the last three Pokémon!");
                    ~main_talk(FACE_SAD, "Yeah, I would know.[K] I helped build them.");
                    ~main_monologue(FACE_PAIN, "(One of the perks of being the only\nliving thing here with actual fingers...)");
                    end;
                case 3:
                    ~partner_talk_close(FACE_HAPPY, "A new resident! Yippee![C]We should give them a full\ntour of the place!");
                    ~main_talk_close(FACE_PAIN, "We've got more important things to do.");
                    end;
                case 4:
                     ~partner_talk_close(FACE_HAPPY, "Can you believe it, [hero]...?[K]\nJust one more Pokémon!");
                     ~main_talk_close(FACE_SAD, "[VS:1:2]Woohoo.[VR][C]I am so happy about this information.");
                    end;
                case 5:
                    ~partner_talk_close(FACE_NORMAL, "The gang's all here...");
                    ~main_talk_close(FACE_SAD, "For better or worse...");
                    end;
            }
            end;
        case 102:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_HAPPY, "We really did just throw random\nstuff in this part of town, huh?");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "What's your take on alliteration?");
                    ~main_talk_close(FACE_NORMAL, "Positively putrid.");
                    end;
                case 4:
                    ~partner_talk(FACE_WORRIED, "Y'know, I've always wondered...[K]\nWhy don't you ever keep stuff\nto yourself, [hero]?");
                    ~partner_talk_close(FACE_WORRIED, "Personal belongings, trinkets--whatever.[K]\nYou don't really keep much, huh...?");
                    ~main_talk_close(FACE_NORMAL, "Never had a need for much stuff.");
                    ~partner_talk_close(FACE_WORRIED, "Forget \"need\".[K] How about \"want\"?");
                    ~main_talk_close(FACE_SAD, "...[K]Not really.");
                    end;
                case 5:
                    ~partner_talk_close(FACE_WORRIED, "We really ought to do some cleaning\nup around here once we're done...");
                    ~main_talk_close(FACE_SAD, "The mural can stay.[K]\nI want my portrait on there.");
                    end;
            }
            end;
        case 49:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~main_talk_close(FACE_SIGH, "Finally.[K] Some peace and quiet.");
                    ~partner_talk_close(FACE_HAPPY, "That can be fixed!");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "I don't understand your obsession with\nthis clock tower.[K] It's just taking up space.");
                    ~main_talk_close(FACE_NORMAL, "Yeah, and so do I.[K]\nGuess we've got a lot in common.");
                    end;
                case 4:
                    ~partner_talk_close(FACE_NORMAL, "Just passing through here, or...?");
                    ~main_talk_close(FACE_SAD, "Yeah.[K] Not like anyone shows up here.");
                    end;
                case 5:
                    ~main_talk_close(FACE_SAD, "Let's go, [partner].");
                    end;
            }
            end;
        case 103:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~main_talk_close(FACE_WORRIED, "How do we decide what words are\nand aren't made up?");
                    ~partner_talk(FACE_NORMAL, "Uh, what?[K] Just outta the blue...?");
                    ~partner_talk_close(FACE_HAPPY, "Aren't all words made up, technically?");
                    ~main_talk_close(FACE_WORRIED, "It can't be as simple as THAT...");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "Why do you keep coming to this part\nof town?[K][FACE:1] Not like there's anything to do.");
                    ~main_talk_close(FACE_NORMAL, "Oh?[K] Didn't expect that, coming from YOU.[C]Something bugging you here?");
                    ~partner_talk_close(FACE_HAPPY, "...[K]Nothing at all.");
                    end;
                case 4:
                    ~partner_talk_close(FACE_WORRIED, "Am I a good friend, [hero]?");
                    ~main_talk_close(FACE_STUNNED, "[VS:1:2]Yeah...?[VR][K] Why wouldn't you be?");
                    ~partner_talk_close(FACE_WORRIED, "...[K]I don't know.[C]I really don't.");
                    end;
                case 5:
                    ~partner_talk_close(FACE_WORRIED, "This isn't the way to the [CS:P]Hollow[CR]...");
                    ~main_talk_close(FACE_SAD, "Yeah. I know.[K]\nJust wanted to say a few things here.");
                    end;
                    
            }
            end;
        case 3:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_JOYOUS, "My favorite part of town![K]\nAren't gardens absolutely amazing...?");
                    ~main_talk_close(FACE_SAD, "I get the feeling gardens shouldn't consist\nof just one plant...[K][FACE:2][VS:1:3]made of paper.[VR]");
                    end;
                case 3:
                    ~partner_talk_close(FACE_HAPPY, "Say, what's your favorite game?");
                    ~main_talk_close(FACE_SAD, "Definitely not hide-and-seek.[K]\nOr anything with winners and losers...");
                    ~partner_talk_close(FACE_HAPPY, "Would it really be a game, then?");
                    end;
                case 4:
                    ~main_talk_close(FACE_SAD, "How often do you lie to me, [partner]?");
                    ~partner_talk_close(FACE_WORRIED, "Uh...[K]you'd think I'd outright give an answer?");
                    ~main_talk_close(FACE_SAD, "If you had nothing to hide, yeah.[K]\nYou could've easily just said\nthat you don't lie.");
                    ~partner_talk_close(FACE_NORMAL, "But that'd be lying...");
                    end;
                case 5:
                    ~main_talk_close(FACE_WORRIED, "Why do we even have that plant\nin the first place...?[C]It's not like it does anything...");
                    ~partner_talk_close(FACE_WORRIED, "Does it HAVE to do something\nto be appreciated?");
                    ~main_talk_close(FACE_SAD, "...");
                    end;
            }
            end;
        case 5:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_NORMAL, "This [CS:K]Doll[CR] gets two tents to themselves.[K]\nLucky...");
                    ~main_talk_close(FACE_SIGH, "Yeah, because you GAVE yours to them.");
                    end;
                case 3:
                    ~partner_talk_close(FACE_HAPPY, "Why don't you ever get into reading\nsometime, [hero]?");
                    ~main_talk_close(FACE_SIGH, "Haha, very funny.[K] We'll cross that bridge\nonce YOU teach me how to read.");
                    end;
                case 4:
                    ~partner_talk_close(FACE_WORRIED, "This [CS:K]Doll[CR]'s all work and no play, huh...?");
                    ~main_talk_close(FACE_SAD, "They're one of the few [CS:K]Dolls[CR] here\nwho I look up to, honestly...");
                    ~partner_talk_close(FACE_WORRIED, "...[K]Does that include me?");
                    ~main_talk_close(FACE_HAPPY, "Of course.[K] Do you even have to ask?");
                    end;
                case 5:
                    ~partner_talk_close(FACE_WORRIED, "Came to say goodbye to them?");
                    ~main_talk_close(FACE_SAD, "Yeah.");
                    ~partner_talk_close(FACE_WORRIED, "Why?[K] We're obviously gonna\nsee them again.");
                    ~main_talk_close(FACE_STUNNED, "...");
                    end;
            }
            end;
        case 45:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~partner_talk_close(FACE_HAPPY, "It's not like it'll kill you to sleep here\nmore often, y'know.");
                    ~main_talk_close(FACE_PAIN, "Not in the physical sense, no...");
                    end;
                case 3:
                    ~partner_talk_close(FACE_NORMAL, "Oh! Actually gonna take a nap now?");
                    ~main_talk_close(FACE_NORMAL, "Wouldn't dream of it.[K] Just passing by.");
                    end;
                case 4:
                    ~main_talk_close(FACE_NORMAL, "We could give this tent to someone else.[K]\nNot like I'll ever use it.");
                    ~partner_talk(FACE_WORRIED, "Yeah, but...[K]it's not like anyone else is\ngonna come here, after this last\nPokémon is saved...");
                    ~partner_talk_close(FACE_NORMAL, "Might as well keep it.[K]\nJust in case!");
                    end;
                case 5:
                    Wait(90);
                    ~with_question_wait(0);
                    ~partner_talk_close(FACE_WORRIED, "Something wrong, [hero]?");
                    ~main_talk_close(FACE_SAD, "[VS:1:10]...[VR][C][VS:1:2]I feel sick for some reason.[K] Let's go.[VR]");
                    end;
            }
            end;
        case 10:
            switch(scn($SCENARIO_MAIN)[1])
            {
                case 2:
                    ~main_talk_close(FACE_WORRIED, "Do you remember how this place\neven came to be?");
                    ~partner_talk_close(FACE_WORRIED, "No...[K]it was just...[K][VS:1:2]always here, I guess.[VR]");
                    end;
                case 3:
                    ~main_talk_close(FACE_WORRIED, "The voice behind the [CS:P]Hollow[CR]...[K]\nDo you happen to know what that is?");
                    ~partner_talk_close(FACE_WORRIED, "No clue...[K][FACE:0] But I'm glad they know how\nto track down Pokémon for us, at least.");
                    ~main_talk_close(FACE_SAD, "Same here...");
                    end;
                case 4:
                    ~partner_talk_close(FACE_SAD, "Please don't rush this.");
                    Wait(80);
                    ~partner_talk_close(FACE_WORRIED, "Okay?");
                    ~main_talk_close(FACE_SAD, "I know what I'm doing.");
                    end;
                case 5:
                    message_Mail("[CN]But if you speak now,\n[CN]you might change your mind.");
                    message_Close();
                    end;
            }
            end;
    }
    end;
}
